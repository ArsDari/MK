    // Начало таблицы переходов

    0000    940C 0034   JMP    $0068
    0004    940C 0051   JMP    $00A2
    0008    940C 0051   JMP    $00A2
    000C    940C 0051   JMP    $00A2
    0010    940C 0051   JMP    $00A2
    0014    940C 0051   JMP    $00A2
    0018    940C 0051   JMP    $00A2
    001C    940C 0051   JMP    $00A2
    0020    940C 0051   JMP    $00A2
    0024    940C 0051   JMP    $00A2
    0028    940C 0051   JMP    $00A2
    002C    940C 0053   JMP    $00A6
    0030    940C 0051   JMP    $00A2
    0034    940C 0051   JMP    $00A2
    0038    940C 0051   JMP    $00A2
    003C    940C 0051   JMP    $00A2
    0040    940C 0051   JMP    $00A2
    0044    940C 0051   JMP    $00A2
    0048    940C 0051   JMP    $00A2
    004C    940C 0051   JMP    $00A2
    0050    940C 0051   JMP    $00A2
    0054    940C 0051   JMP    $00A2
    0058    940C 0051   JMP    $00A2
    005C    940C 0051   JMP    $00A2
    0060    940C 0051   JMP    $00A2
    0064    940C 0051   JMP    $00A2

    // Конец таблицы переходов
    // Сброс флагов, установка указателя стека, в X хранится адрес массива в ОЗУ, в Z хранится адрес констант из памяти программы

    0068    2411        CLR    R1
    006A    BE1F        OUT    SREG, R1
    006C    EFCF        LDI    YL, $FF
    006E    E0D8        LDI    YH, $08
    0070    BFDE        OUT    SPH, YH
    0072    BFCD        OUT    SPL, YL
    0074    E011        LDI    R17, $01
    0076    E0A0        LDI    XL, $00 // X = $0100
    0078    E0B1        LDI    XH, $01
    007A    E7EE        LDI    ZL, $7E // Z = $017E
    007C    E0F1        LDI    ZH, $01
    007E    C002        RJMP   $+0006(0084)
    
    // Цикл чтения и записи констант в ОЗУ

    0080    9005        LPM    R0, Z+
    0082    920D        ST     X+, R0
    0084    32A0        CPI    XL, $20
    0086    07B1        CPC    XH, R17 // Пока X != $0120
    0088    F7D9        BRNE   $0080
    
    // Конец цикла

    008A    E021        LDI    R18, $01
    008C    E2A0        LDI    XL, $20 // X = $0120
    008E    E0B1        LDI    XH, $01
    0090    C001        RJMP   $+0004(0094)

    // Начало цикла

    0092    921D        ST     X+,R1
    0094    3241        CPI    XL,$21
    0096    0782        CPC    XH,R18 // X != $0121
    0098    F7E1        BRNE   $0092
    
    // Конец цикла

    009A    940E 0096   CALL   $012C // вызов функции main
    009E    940C 00BD   JMP    $017A // бесконечный цикл
    00A2    940C 0000   JMP    $0000 // сброс

    // Прерывание загружает 1 во флаг, увеличивает порог для таймера

    00A6    921F        PUSH   R1
    00A8    920F        PUSH   R0
    00AA    B60F        IN     R0, SREG
    00AC    920F        PUSH   R0
    00AE    2411        CLR    R1
    00B0    938F        PUSH   R24
    00B2    939F        PUSH   R25
    00B4    93EF        PUSH   R30
    00B6    93FF        PUSH   R31
    00B8    E081        LDI    R24, $01
    00BA    9380 0120   STS    $0120, R24
    00BE    E8E8        LDI    ZL, $88
    00C0    E0F0        LDI    ZH, $00
    00C2    8180        LD     R24, Z // R24 <= OCR1AL
    00C4    8191        LD     R25, Z+1 // R25 <= OCR1AH
    00C6    5881        SUBI   R24, $B1 // R24 <= R24 - $B1
    00C8    459D        SBCI   R25, $ED // R24 <= R24 - $ED
    00CA    8391        ST     Z+1,R25 // OCR1AH <= R25
    00CC    8380        ST     Z,R24 // OCR1AL <= R24
    00CE    91FF        POP    ZH
    00D0    91EF        POP    ZL
    00D2    919F        POP    R25
    00D4    918F        POP    R24
    00D6    900F        POP    R0
    00D8    BE0F        OUT    SREG,R0
    00DA    900F        POP    R0
    00DC    901F        POP    R1
    00DE    9518        RETI

    // Конец прерывания
    // Функция первоначальной настройки таймера

    00E0    E085        LDI    R24,$05 // 0000 0101
    00E2    9380 0081   STS    TCCR1B,R24 // TCCR1B = (1 << CS12) | (1 << CS10)
    00E6    E082        LDI    R24,$02 // 0000 0010
    00E8    9380 006F   STS    TIMSK1,R24 // TIMSK1 = (1 << OCIE1A)
    00EC    E48F        LDI    R24,$4F
    00EE    E192        LDI    R25,$12
    00F0    9390 0089   STS    OCR1AH,R25
    00F4    9380 0088   STS    OCR1AL,R24
    00F8    9508        RET
    
    // Конец функции
    // Начало функции отправки данных по SPI

    00FA    BD8E        OUT    SPDR, R24 // SPDR <= R24
    00FC    B40D        IN     R0, SPSR // R0 <= SPSR
    00FE    FE07        SBRS   R0, $07 // skip if SPIF == 1
    0100    CFFD        RJMP   $-0004(00FC) // блокирующая отправка данных
    0102    9508        RET

    // Конец функции
    // Функция отправки данных по SPI

    0104    93CF        PUSH   YL
    0106    93DF        PUSH   YH
    0108    D000        RCALL  $+0002(010A) // вызов тела функции
    010A    B7CD        IN     YL, SPL
    010C    B7DE        IN     YH, SPH
    010E    839A        STD    Y+2, R25
    0110    8389        STD    Y+1, R24
    0112    818A        LD     R24, Y+2 // отправка первого байта данных
    0114    940E 007D   CALL   $00FA // отправка данных по SPI
    0118    8189        LD     R24, Y+1 // следующий байт данных
    011A    940E 007D   CALL   $00FA // отправка данных по SPI
    011E    9429        SBI    PORTB, 1 // защелкивание данных
    0120    9829        CBI    PORTB, 1
    0122    900F        POP    R0
    0124    900F        POP    R0
    0126    91DF        POP    YH
    0128    91CF        POP    YL
    012A    9508        RET

    // Конец функции
    // main

    012C    EF8F        LDI    R24, $FF
    012E    B984        OUT    DDRB, R24
    0130    9451        SBI    DDRD, 1

    0132    940E 0070   CALL   $00E0 // вызов функции

    0136    E581        LDI    R24, $51 // 0101 0001
    0138    BD8C        OUT    SPCR, R24 // SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0)
    013A    9478        SEI
    013C    E0E0        LDI    ZL, $00
    013E    E0C0        LDI    YL, $00
    0140    E011        LDI    R17, $01
    0142    C001        RJMP   $+0004(0146)
    0144    2FED        MOV    ZL, YH

    0146    9180 0120   LDS    R24, $0120 // загрузка флага
    014A    2388        TST    R24 // загрузка SREG
    014C    F3E1        BREQ   $0146 // перейти дальше, если установлен флаг
    014E    9210 0120   STS    $0120, R1 // запись флага
    0152    31E0        CPI    ZL, $10
    0154    F409        BRNE   $0158 // переход, если ZL != 10???
    0156    E0E0        LDI    ZL, $00
    0158    E0D1        LDI    YH, $01
    015A    0FDE        ADD    YH, ZL
    015C    E0F0        LDI    ZH, $00
    015E    0FEE        LSL    ZL
    0160    1FFF        ROL    ZH
    0162    50E0        SUBI   ZL, $00
    0164    4FFF        SBCI   ZH, $FF
    0166    8180        LD     R24, Z
    0168    8191        LD     R25, Z+1
    016A    940E 0082   CALL   $0104 // функция отправки данных по SPI
    016E    27C1        EOR    R28, R17 // R17 <= R28 ^ R17
    0170    F011        BREQ   $0176
    0172    9A59        SBI    $0B, 1 // установка, если R17 == 1
    0174    CFE7        RJMP   $-0030(0144)
    0176    9859        CBI    $0B, 1 // сброс, если R17 == 0
    0178    CFE5        RJMP   $-0034(0144)

    // запрет прерывании и бесконечный цикл
    017A    94F8        CLI
    017C    CFFF        RJMP   $+0000(017C)

    // Сегмент данных

    017E    0001        INVALID
    0180    0002        INVALID
    0182    0004        INVALID
    0184    0008        INVALID
    0186    0010        INVALID
    0188    0020        INVALID
    018A    0040        INVALID
    018C    0080        INVALID
    018E    0101        MOVW   R1:R0, R3:R2
    0190    0202        MULS   R16, R18
    0192    0404        CPC    R0, R4
    0194    0808        SBC    R0, R8
    0196    1010        CPSE   R1, R0
    0198    2020        AND    R2, R0
    019A    4040        SBCI   R20, $00
    019C    8080        LD     R8, Z